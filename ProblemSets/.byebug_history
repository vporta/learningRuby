exit
s
display count
display string
exit
s
display string
display s
exit
s
n
display array
display n
exit
s
display n
display array 
exit
up
s
display count
display el[0]
display el
display hasher
display names
exit
s
display names
display hasher
display count 
display el 
s
display names
display el 
s
display names
display el 
c
s
display names
display el
exit
s
display length_per_word
display each_word
display idx
display make_array
s
display stringify
display len
exit
s
display last_letter
exit
s
display last_letter
exit
s
display number
display last_letter
exit
s
n
s
display number
s
display stringify 
display last_letter
exit
s
display el 
display stringify 
display string
display last_letter 
exit
s
display number
s
display el 
display stringify 
s
display stringify
s
display stringify
s
display stringify
exit
s
word
reversed
display reversed
s
up
s
display reversed_word
display word
display string
exit
up
s
display count
display hashed
display el 
exit
s
display el
display count
display hashed 
exit
clear
s
display word
display el
exit
s
display hashed
display el
display numbers
display odd_count
display even_count
continue
up
s
up
n
display numbers
display hashed
display el
display odd_count
display even_count
exit
s
n
display hashed
display numbers
display el
display odd_count
display even_count
exit
s
display numbers
display el
exit
s
el
display numbers
s
display el
n
exit
s
display sum
s
exit
s
display sum 
s
n
display n 
exit
s
n
s
display array_of_nums.length
display array_of_nums
up
s
exit
  end
    # end
    #   return false
    # else 
    #   return true 
    # if sum == 7 
    p sum+=i
  number.each do |i|
  sum = 0 
  number = number.to_s.split("")
def is_magic_number?(number)
s
up
display sum
s
n
display i 
display number
display number, i
n
exit
n
s
n
display i 
display number
exit
up
s
display i
s
display number
n
exit
s
display is_slippery?
up
s
display number 
up
n
exit
up
s
n
c
